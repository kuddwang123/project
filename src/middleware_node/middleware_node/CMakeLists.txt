cmake_minimum_required(VERSION 3.0.2)
set(NODE_NAME middleware_node)
project(${NODE_NAME})
set (CMAKE_CXX_STANDARD 14)
set( HJ_WORKSPACE_PATH "../..")
set(PROJECT_NUMBER "x9" CACHE STRING "project number, such as 2312")
message("Current project number is ${PROJECT_NUMBER}")
add_definitions(-DPROJECT_NUMBER="${PROJECT_NUMBER}")

set(PLATFORM "amd64" CACHE STRING "amd64, i386, arm64_rk, etc.")
message("PLATFORM :${PLATFORM}")
add_definitions(-DNODE_NAME="${PROJECT_NAME}")
set(RELEASE_VER "debug" CACHE STRING "debug or release")
if(${RELEASE_VER} STREQUAL "debug")
  add_definitions(-DLOG_LEVEL="debug")
elseif(${RELEASE_VER} STREQUAL "release")
  add_definitions(-DCONFIG_ENABLE_LOG=4)
  add_definitions(-DLOG_LEVEL="release")
  set(CMAKE_BUILD_TYPE "RELEASE")
  set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
endif()
if(${PLATFORM} STREQUAL "amd64")
  add_definitions(-DHJ_AMD64)
  # add_definitions(-DCONFIG_PATH="/tmp/middleware_node/config.json")
  # add_definitions(-DSO_PATH="/tmp/middleware_node/")
  add_definitions(-DCONFIG_PATH="${CMAKE_CURRENT_SOURCE_DIR}/config/${PROJECT_NUMBER}/${PLATFORM}/config.json")
  add_definitions(-DSO_PATH="${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${PROJECT_NAME}")
  add_definitions(-DLOG_CONFIG_PATH="${CMAKE_SOURCE_DIR}/hj_manager/${PROJECT_NUMBER}/config/${PLATFORM}/hj_log.config")
  add_definitions(-DCRYPT_VAL="")
elseif(${PLATFORM} STREQUAL "aarch64-linux-gnu")
  add_definitions(-DHJ_AARCH64)
  add_definitions(-DCONFIG_PATH="/home/robot/data/hj/config/config.json")
  add_definitions(-DSO_PATH="")
  add_definitions(-DLOG_CONFIG_PATH="/home/robot/data/hj/config/hj_log.config")
  if(${PROJECT_NUMBER} STREQUAL "T1pro")
#    add_definitions(-DCRYPT_VAL="000301")
    add_definitions(-DCRYPT_VAL="")
  else()
    add_definitions(-DCRYPT_VAL="")
  endif()
endif()
find_package(catkin REQUIRED COMPONENTS message_generation rostime roscpp)
include_directories(include ${catkin_INCLUDE_DIRS})
include_directories("${HJ_WORKSPACE_PATH}/thirdparty/include")
include_directories("${HJ_WORKSPACE_PATH}/hj_interface/include")
include_directories("${HJ_WORKSPACE_PATH}/middleware_node/data_manage/include")
link_directories(${catkin_LIBRARY_DIRS})
link_directories("${HJ_WORKSPACE_PATH}/hj_interface/platforms/${PLATFORM}")
link_directories("${HJ_WORKSPACE_PATH}/thirdparty/platforms/${PLATFORM}")
generate_messages(DEPENDENCIES std_msgs)

catkin_package(CATKIN_DEPENDS message_runtime std_msgs)

add_executable(${NODE_NAME} src/middleware_node_manager.cpp)
target_link_libraries(${NODE_NAME}  ${catkin_LIBRARIES} dl)
target_link_libraries(${NODE_NAME}  base_framework big_data)

add_custom_command(
  TARGET ${NODE_NAME}
  POST_BUILD
  COMMAND
  cp ${CMAKE_SOURCE_DIR}/hj_interface/platforms/${PLATFORM}/libcore_dump.so ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${NODE_NAME} 
  COMMAND
  cp ${CMAKE_SOURCE_DIR}/hj_interface/platforms/${PLATFORM}/liblog_redirect.so ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/${NODE_NAME}
  )
