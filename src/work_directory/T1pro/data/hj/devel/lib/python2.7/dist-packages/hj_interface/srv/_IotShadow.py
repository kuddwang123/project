# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hj_interface/IotShadowRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hj_interface.msg

class IotShadowRequest(genpy.Message):
  _md5sum = "82be010920876fb28c00272bfa118dc0"
  _type = "hj_interface/IotShadowRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """hj_interface/AppData[] appdata


================================================================================
MSG: hj_interface/AppData
string key
string payload
int8  res    	#response code

"""
  __slots__ = ['appdata']
  _slot_types = ['hj_interface/AppData[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       appdata

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IotShadowRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.appdata is None:
        self.appdata = []
    else:
      self.appdata = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.appdata)
      buff.write(_struct_I.pack(length))
      for val1 in self.appdata:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.payload
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.res
        buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.appdata is None:
        self.appdata = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.appdata = []
      for i in range(0, length):
        val1 = hj_interface.msg.AppData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.payload = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.payload = str[start:end]
        start = end
        end += 1
        (val1.res,) = _get_struct_b().unpack(str[start:end])
        self.appdata.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.appdata)
      buff.write(_struct_I.pack(length))
      for val1 in self.appdata:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.payload
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.res
        buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.appdata is None:
        self.appdata = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.appdata = []
      for i in range(0, length):
        val1 = hj_interface.msg.AppData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.payload = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.payload = str[start:end]
        start = end
        end += 1
        (val1.res,) = _get_struct_b().unpack(str[start:end])
        self.appdata.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hj_interface/IotShadowResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hj_interface.msg

class IotShadowResponse(genpy.Message):
  _md5sum = "d48edf896f9dc7bcd7c37d637b5c70c3"
  _type = "hj_interface/IotShadowResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
hj_interface/AppData[]  desired       		# shadow doc desired json string
hj_interface/AppData[]  metadata      		# shadow doc meta json string
hj_interface/IotReturn iotret   	        # iot response from AWS
uint64  timestamp     			        # the Epoch date and time the response was generated by AWS IoT


================================================================================
MSG: hj_interface/AppData
string key
string payload
int8  res    	#response code


================================================================================
MSG: hj_interface/IotReturn
int64  code
string msg
"""
  __slots__ = ['desired','metadata','iotret','timestamp']
  _slot_types = ['hj_interface/AppData[]','hj_interface/AppData[]','hj_interface/IotReturn','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       desired,metadata,iotret,timestamp

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IotShadowResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.desired is None:
        self.desired = []
      if self.metadata is None:
        self.metadata = []
      if self.iotret is None:
        self.iotret = hj_interface.msg.IotReturn()
      if self.timestamp is None:
        self.timestamp = 0
    else:
      self.desired = []
      self.metadata = []
      self.iotret = hj_interface.msg.IotReturn()
      self.timestamp = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.desired)
      buff.write(_struct_I.pack(length))
      for val1 in self.desired:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.payload
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.res
        buff.write(_get_struct_b().pack(_x))
      length = len(self.metadata)
      buff.write(_struct_I.pack(length))
      for val1 in self.metadata:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.payload
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.res
        buff.write(_get_struct_b().pack(_x))
      _x = self.iotret.code
      buff.write(_get_struct_q().pack(_x))
      _x = self.iotret.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.desired is None:
        self.desired = None
      if self.metadata is None:
        self.metadata = None
      if self.iotret is None:
        self.iotret = hj_interface.msg.IotReturn()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.desired = []
      for i in range(0, length):
        val1 = hj_interface.msg.AppData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.payload = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.payload = str[start:end]
        start = end
        end += 1
        (val1.res,) = _get_struct_b().unpack(str[start:end])
        self.desired.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.metadata = []
      for i in range(0, length):
        val1 = hj_interface.msg.AppData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.payload = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.payload = str[start:end]
        start = end
        end += 1
        (val1.res,) = _get_struct_b().unpack(str[start:end])
        self.metadata.append(val1)
      start = end
      end += 8
      (self.iotret.code,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.iotret.msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.iotret.msg = str[start:end]
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.desired)
      buff.write(_struct_I.pack(length))
      for val1 in self.desired:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.payload
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.res
        buff.write(_get_struct_b().pack(_x))
      length = len(self.metadata)
      buff.write(_struct_I.pack(length))
      for val1 in self.metadata:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.payload
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.res
        buff.write(_get_struct_b().pack(_x))
      _x = self.iotret.code
      buff.write(_get_struct_q().pack(_x))
      _x = self.iotret.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timestamp
      buff.write(_get_struct_Q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.desired is None:
        self.desired = None
      if self.metadata is None:
        self.metadata = None
      if self.iotret is None:
        self.iotret = hj_interface.msg.IotReturn()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.desired = []
      for i in range(0, length):
        val1 = hj_interface.msg.AppData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.payload = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.payload = str[start:end]
        start = end
        end += 1
        (val1.res,) = _get_struct_b().unpack(str[start:end])
        self.desired.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.metadata = []
      for i in range(0, length):
        val1 = hj_interface.msg.AppData()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.payload = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.payload = str[start:end]
        start = end
        end += 1
        (val1.res,) = _get_struct_b().unpack(str[start:end])
        self.metadata.append(val1)
      start = end
      end += 8
      (self.iotret.code,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.iotret.msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.iotret.msg = str[start:end]
      start = end
      end += 8
      (self.timestamp,) = _get_struct_Q().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
class IotShadow(object):
  _type          = 'hj_interface/IotShadow'
  _md5sum = '333f4fcafe7f2ee4aef3c9f404a25e2e'
  _request_class  = IotShadowRequest
  _response_class = IotShadowResponse
