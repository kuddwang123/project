# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hj_interface/Kbd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Kbd(genpy.Message):
  _md5sum = "bb2a59634e6cf01d3ea8234234347fd8"
  _type = "hj_interface/Kbd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 type
int32 left_msg
int32 right_msg

uint8 turn_motor_status     #!< 0 刹车； 1 运动； 2 滑行
int16 turn_motor_l      #!< 水面前进控制 喷口转向电机
int16 turn_motor_r      #!< 水面前进控制

uint8 pump_status       #!< 0 刹车； 1 运行；水泵控制
uint8 pump_speed        #!< 占空比  0到100

uint8 airbag_status     #!< 0 全放气； 1 全充气； 2 左充气； 3 右充气
uint16 airbag_time      #!< 充/放气时间  单位10ms

uint8 fan_status        #!< 0 刹车； 1 运行； 自清洁电机,目前没有转速

int16 flip_cover_angle     #!< 翻盖电机  位置  单位0.1度 上吸口开门
"""
  __slots__ = ['type','left_msg','right_msg','turn_motor_status','turn_motor_l','turn_motor_r','pump_status','pump_speed','airbag_status','airbag_time','fan_status','flip_cover_angle']
  _slot_types = ['uint8','int32','int32','uint8','int16','int16','uint8','uint8','uint8','uint16','uint8','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,left_msg,right_msg,turn_motor_status,turn_motor_l,turn_motor_r,pump_status,pump_speed,airbag_status,airbag_time,fan_status,flip_cover_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Kbd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = 0
      if self.left_msg is None:
        self.left_msg = 0
      if self.right_msg is None:
        self.right_msg = 0
      if self.turn_motor_status is None:
        self.turn_motor_status = 0
      if self.turn_motor_l is None:
        self.turn_motor_l = 0
      if self.turn_motor_r is None:
        self.turn_motor_r = 0
      if self.pump_status is None:
        self.pump_status = 0
      if self.pump_speed is None:
        self.pump_speed = 0
      if self.airbag_status is None:
        self.airbag_status = 0
      if self.airbag_time is None:
        self.airbag_time = 0
      if self.fan_status is None:
        self.fan_status = 0
      if self.flip_cover_angle is None:
        self.flip_cover_angle = 0
    else:
      self.type = 0
      self.left_msg = 0
      self.right_msg = 0
      self.turn_motor_status = 0
      self.turn_motor_l = 0
      self.turn_motor_r = 0
      self.pump_status = 0
      self.pump_speed = 0
      self.airbag_status = 0
      self.airbag_time = 0
      self.fan_status = 0
      self.flip_cover_angle = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2iB2h3BHBh().pack(_x.type, _x.left_msg, _x.right_msg, _x.turn_motor_status, _x.turn_motor_l, _x.turn_motor_r, _x.pump_status, _x.pump_speed, _x.airbag_status, _x.airbag_time, _x.fan_status, _x.flip_cover_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.type, _x.left_msg, _x.right_msg, _x.turn_motor_status, _x.turn_motor_l, _x.turn_motor_r, _x.pump_status, _x.pump_speed, _x.airbag_status, _x.airbag_time, _x.fan_status, _x.flip_cover_angle,) = _get_struct_B2iB2h3BHBh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2iB2h3BHBh().pack(_x.type, _x.left_msg, _x.right_msg, _x.turn_motor_status, _x.turn_motor_l, _x.turn_motor_r, _x.pump_status, _x.pump_speed, _x.airbag_status, _x.airbag_time, _x.fan_status, _x.flip_cover_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.type, _x.left_msg, _x.right_msg, _x.turn_motor_status, _x.turn_motor_l, _x.turn_motor_r, _x.pump_status, _x.pump_speed, _x.airbag_status, _x.airbag_time, _x.fan_status, _x.flip_cover_angle,) = _get_struct_B2iB2h3BHBh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2iB2h3BHBh = None
def _get_struct_B2iB2h3BHBh():
    global _struct_B2iB2h3BHBh
    if _struct_B2iB2h3BHBh is None:
        _struct_B2iB2h3BHBh = struct.Struct("<B2iB2h3BHBh")
    return _struct_B2iB2h3BHBh
