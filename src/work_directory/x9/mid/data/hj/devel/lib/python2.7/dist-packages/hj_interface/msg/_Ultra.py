# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hj_interface/Ultra.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class Ultra(genpy.Message):
  _md5sum = "c6aa8c621795b0a60bea865ebc41ad12"
  _type = "hj_interface/Ultra"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time timestamp 
uint32 front_l 
uint32 front_m
uint32 front_r
uint32 mid
uint32 back
uint8 status #!< 超声波状态,0 means normal,1 means error. 
             #!< 三合一超声波 bit0, 侧边mid超声波bit1 侧边back超声波bit2
uint8 id #!< 超声波id,0 means front,1 means mid,2 means back
"""
  __slots__ = ['timestamp','front_l','front_m','front_r','mid','back','status','id']
  _slot_types = ['time','uint32','uint32','uint32','uint32','uint32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,front_l,front_m,front_r,mid,back,status,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Ultra, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.front_l is None:
        self.front_l = 0
      if self.front_m is None:
        self.front_m = 0
      if self.front_r is None:
        self.front_r = 0
      if self.mid is None:
        self.mid = 0
      if self.back is None:
        self.back = 0
      if self.status is None:
        self.status = 0
      if self.id is None:
        self.id = 0
    else:
      self.timestamp = genpy.Time()
      self.front_l = 0
      self.front_m = 0
      self.front_r = 0
      self.mid = 0
      self.back = 0
      self.status = 0
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7I2B().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.front_l, _x.front_m, _x.front_r, _x.mid, _x.back, _x.status, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.front_l, _x.front_m, _x.front_r, _x.mid, _x.back, _x.status, _x.id,) = _get_struct_7I2B().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7I2B().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.front_l, _x.front_m, _x.front_r, _x.mid, _x.back, _x.status, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 30
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.front_l, _x.front_m, _x.front_r, _x.mid, _x.back, _x.status, _x.id,) = _get_struct_7I2B().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7I2B = None
def _get_struct_7I2B():
    global _struct_7I2B
    if _struct_7I2B is None:
        _struct_7I2B = struct.Struct("<7I2B")
    return _struct_7I2B
