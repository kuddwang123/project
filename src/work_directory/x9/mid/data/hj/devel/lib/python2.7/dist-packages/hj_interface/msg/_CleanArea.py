# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hj_interface/CleanArea.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CleanArea(genpy.Message):
  _md5sum = "d29c0130f06a580f71148ca2b7b348ec"
  _type = "hj_interface/CleanArea"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[] clean_area  # 1-池底 2-池壁 3-水线 4-水面 5-台阶 FIFO 清扫顺序
int32 pool_bottom   # 池底次数
int32 pool_wall     # 池壁次数
int32 water_line    # 水线次数
int32 water_surface # 水面次数
int32 step          # 台阶次数"""
  __slots__ = ['clean_area','pool_bottom','pool_wall','water_line','water_surface','step']
  _slot_types = ['int32[]','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       clean_area,pool_bottom,pool_wall,water_line,water_surface,step

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CleanArea, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.clean_area is None:
        self.clean_area = []
      if self.pool_bottom is None:
        self.pool_bottom = 0
      if self.pool_wall is None:
        self.pool_wall = 0
      if self.water_line is None:
        self.water_line = 0
      if self.water_surface is None:
        self.water_surface = 0
      if self.step is None:
        self.step = 0
    else:
      self.clean_area = []
      self.pool_bottom = 0
      self.pool_wall = 0
      self.water_line = 0
      self.water_surface = 0
      self.step = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.clean_area)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.clean_area))
      _x = self
      buff.write(_get_struct_5i().pack(_x.pool_bottom, _x.pool_wall, _x.water_line, _x.water_surface, _x.step))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.clean_area = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.pool_bottom, _x.pool_wall, _x.water_line, _x.water_surface, _x.step,) = _get_struct_5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.clean_area)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.clean_area.tostring())
      _x = self
      buff.write(_get_struct_5i().pack(_x.pool_bottom, _x.pool_wall, _x.water_line, _x.water_surface, _x.step))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.clean_area = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 20
      (_x.pool_bottom, _x.pool_wall, _x.water_line, _x.water_surface, _x.step,) = _get_struct_5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
