# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hj_interface/SteerAndPump.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class SteerAndPump(genpy.Message):
  _md5sum = "74ca34f6b82cb9feee8ff122df8a4bf4"
  _type = "hj_interface/SteerAndPump"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time timestamp
uint8 turn_motor_ctl     #!< 0 刹车； 1 运动； 2 滑行 
int16 turn_motor_l      #!< 水面前进控制 喷口转向电机 范围(-180~180度) 左侧喷口转向电机控制
int16 turn_motor_r      #!< 水面前进控制 范围(-180~180度)右侧喷口转向电机控制

uint8 pump_ctl       #!< 0 停止； 1 运行 水泵控制          
uint8 pump_speed       #!< 占空比 0到100 水泵PWM控制"""
  __slots__ = ['timestamp','turn_motor_ctl','turn_motor_l','turn_motor_r','pump_ctl','pump_speed']
  _slot_types = ['time','uint8','int16','int16','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,turn_motor_ctl,turn_motor_l,turn_motor_r,pump_ctl,pump_speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SteerAndPump, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.turn_motor_ctl is None:
        self.turn_motor_ctl = 0
      if self.turn_motor_l is None:
        self.turn_motor_l = 0
      if self.turn_motor_r is None:
        self.turn_motor_r = 0
      if self.pump_ctl is None:
        self.pump_ctl = 0
      if self.pump_speed is None:
        self.pump_speed = 0
    else:
      self.timestamp = genpy.Time()
      self.turn_motor_ctl = 0
      self.turn_motor_l = 0
      self.turn_motor_r = 0
      self.pump_ctl = 0
      self.pump_speed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2IB2h2B().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.turn_motor_ctl, _x.turn_motor_l, _x.turn_motor_r, _x.pump_ctl, _x.pump_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 15
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.turn_motor_ctl, _x.turn_motor_l, _x.turn_motor_r, _x.pump_ctl, _x.pump_speed,) = _get_struct_2IB2h2B().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2IB2h2B().pack(_x.timestamp.secs, _x.timestamp.nsecs, _x.turn_motor_ctl, _x.turn_motor_l, _x.turn_motor_r, _x.pump_ctl, _x.pump_speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 15
      (_x.timestamp.secs, _x.timestamp.nsecs, _x.turn_motor_ctl, _x.turn_motor_l, _x.turn_motor_r, _x.pump_ctl, _x.pump_speed,) = _get_struct_2IB2h2B().unpack(str[start:end])
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2IB2h2B = None
def _get_struct_2IB2h2B():
    global _struct_2IB2h2B
    if _struct_2IB2h2B is None:
        _struct_2IB2h2B = struct.Struct("<2IB2h2B")
    return _struct_2IB2h2B
