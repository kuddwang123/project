// Generated by gencpp from file hj_interface/RelocalizationResultRequest.msg
// DO NOT EDIT!


#ifndef HJ_INTERFACE_MESSAGE_RELOCALIZATIONRESULTREQUEST_H
#define HJ_INTERFACE_MESSAGE_RELOCALIZATIONRESULTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace hj_interface
{
template <class ContainerAllocator>
struct RelocalizationResultRequest_
{
  typedef RelocalizationResultRequest_<ContainerAllocator> Type;

  RelocalizationResultRequest_()
    : pose()
    , entry_position_pose()
    , relocalization_success(false)
    , building_frames_success(false)  {
    }
  RelocalizationResultRequest_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , entry_position_pose(_alloc)
    , relocalization_success(false)
    , building_frames_success(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _entry_position_pose_type;
  _entry_position_pose_type entry_position_pose;

   typedef uint8_t _relocalization_success_type;
  _relocalization_success_type relocalization_success;

   typedef uint8_t _building_frames_success_type;
  _building_frames_success_type building_frames_success;





  typedef boost::shared_ptr< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RelocalizationResultRequest_

typedef ::hj_interface::RelocalizationResultRequest_<std::allocator<void> > RelocalizationResultRequest;

typedef boost::shared_ptr< ::hj_interface::RelocalizationResultRequest > RelocalizationResultRequestPtr;
typedef boost::shared_ptr< ::hj_interface::RelocalizationResultRequest const> RelocalizationResultRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator1> & lhs, const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.entry_position_pose == rhs.entry_position_pose &&
    lhs.relocalization_success == rhs.relocalization_success &&
    lhs.building_frames_success == rhs.building_frames_success;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator1> & lhs, const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hj_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c966b9c0532937e900886404b26ddf3d";
  }

  static const char* value(const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc966b9c0532937e9ULL;
  static const uint64_t static_value2 = 0x00886404b26ddf3dULL;
};

template<class ContainerAllocator>
struct DataType< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hj_interface/RelocalizationResultRequest";
  }

  static const char* value(const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose pose   # relocalization result\n"
"geometry_msgs/Pose entry_position_pose\n"
"bool relocalization_success  # true. relocalization success; false. relocalization failed.\n"
"bool building_frames_success  # true. building frames success; false. building frames failed.\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.entry_position_pose);
      stream.next(m.relocalization_success);
      stream.next(m.building_frames_success);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RelocalizationResultRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hj_interface::RelocalizationResultRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hj_interface::RelocalizationResultRequest_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "entry_position_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.entry_position_pose);
    s << indent << "relocalization_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relocalization_success);
    s << indent << "building_frames_success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.building_frames_success);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HJ_INTERFACE_MESSAGE_RELOCALIZATIONRESULTREQUEST_H
